[{"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\index.js":"1","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\useFetch.js":"2","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\App.js":"3","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\WeatherCard.js":"4","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\Daily.js":"5","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\Hourly.js":"6","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\Chart.js":"7","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\Navbar.js":"8"},{"size":278,"mtime":1607639771932,"results":"9","hashOfConfig":"10"},{"size":495,"mtime":1607635985846,"results":"11","hashOfConfig":"10"},{"size":4212,"mtime":1607900263817,"results":"12","hashOfConfig":"10"},{"size":3194,"mtime":1607887891809,"results":"13","hashOfConfig":"10"},{"size":3900,"mtime":1607887465885,"results":"14","hashOfConfig":"10"},{"size":4277,"mtime":1607820103197,"results":"15","hashOfConfig":"10"},{"size":1355,"mtime":1607817238590,"results":"16","hashOfConfig":"10"},{"size":697,"mtime":1607906883297,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1846mn",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\index.js",[],["38","39"],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\useFetch.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\App.js",["40","41","42","43"],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\WeatherCard.js",["44","45"],"import React, { Component, useState } from \"react\";\r\nimport { useFetch } from \"./useFetch\";\r\n\r\nconst WeatherCard = ({ city, unit, dt }) => {\r\n  const key = \"05e47cb6f8fc8afa437fc32af1218b36\";\r\n  const base = \"http://api.openweathermap.org/data/2.5/weather\";\r\n  const query = `?q=${city}&units=metric&appid=${key}`;\r\n\r\n  const { loading, details } = useFetch(base + query);\r\n\r\n  const convertTemperature = (temperature) => {\r\n    return unit === \"celcius\" ? temperature : (temperature * 9) / 5 - 459.67;\r\n  };\r\n\r\n  if (loading) return <h1>Loading...</h1>;\r\n\r\n  const { main, weather, visibility } = details;\r\n\r\n  let { description } = weather[0];\r\n\r\n  let weatherMainDescription = weather[0].main;\r\n\r\n  const { temp, pressure, humidity } = main;\r\n\r\n  let unix_timestamp = dt;\r\n  let date = new Date(unix_timestamp * 1000);\r\n  let hours = date.getHours();\r\n  let minutes = date.getMinutes();\r\n\r\n  let dayTime = () => {\r\n    return hours < 17 ? \"day\" : \"night\";\r\n  };\r\n\r\n  //uncomment next line only for testing\r\n  //description = \"mist\";\r\n  return (\r\n    <>\r\n      <div className=\"weather-card\">\r\n        <div\r\n          className={`weather-card_container ${description.replace(\" \", \"_\")}`}\r\n        >\r\n          <div className=\"weather-card_panel\">\r\n            <h2>The weather now at {city}</h2>\r\n            <p>\r\n              {hours}:{minutes < 10 ? \"0\" + minutes : minutes}\r\n            </p>\r\n            <div className=\"weather-card_panel main\">\r\n              <i\r\n                className={`wu wu-${iconKey(\r\n                  description\r\n                )} wu-128 wu-solid-white wu-${dayTime()}`}\r\n              ></i>\r\n              <p className=\"temperature\">\r\n                {Math.round(convertTemperature(temp))}°{\"\"}\r\n                {unit === \"celcius\" ? \"c\" : \"f\"}\r\n              </p>\r\n            </div>\r\n            <div className=\"description_container\">\r\n              <h4 className=\"weather_description\">{weatherMainDescription}</h4>\r\n              <p className=\"weather_description\">{description}</p>\r\n            </div>\r\n          </div>\r\n          <section className=\"weather-card_pard_panel details\">\r\n            <p className=\"details\">Pressure: {pressure} hPa</p>\r\n            <p className=\"details\">Humidity: {humidity}%</p>\r\n            <p className=\"details\">visibility: {visibility / 1000} km</p>\r\n            <button className=\"btn\">Show more</button>\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport let iconKey = (element) => {\r\n  // description = \"clear sky\";\r\n  // console.log(description);\r\n\r\n  switch (element) {\r\n    case \"clear sky\":\r\n      return \"clear\";\r\n    case \"few clouds\":\r\n      return \"mostlycloudy\";\r\n    case \"scattered clouds\":\r\n      return \"partlycloudy\";\r\n    case \"broken clouds\":\r\n      return \"cloudy\";\r\n    case \"overcast clouds\":\r\n      return \"cloudy\";\r\n    case \"shower rain\":\r\n      return \"flurries\";\r\n    case \"rain\":\r\n      return \"rain\";\r\n    case \"light rain\":\r\n      return \"flurries\";\r\n    case \"thunderstorm\":\r\n      return \"tstorms\";\r\n    case \"snow\":\r\n      return \"snow\";\r\n    case \"mist\":\r\n      return \"fog\";\r\n    default:\r\n      return \"unknown\";\r\n  }\r\n};\r\nexport default WeatherCard;\r\n","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\Daily.js",["46","47","48"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useFetch } from \"./useFetch\";\r\nimport { iconKey } from \"./WeatherCard\";\r\nimport { BiChevronsUp } from \"react-icons/bi\";\r\nimport \"./css/Daily.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nconst Daily = ({ details }) => {\r\n  let { daily } = details;\r\n  let DailyList = () => {\r\n    return daily.map((element, index) => {\r\n      return <DayItem element={element} key={index} />;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"daily-card\">\r\n        <div className={`daily-card_header`}>\r\n          <h1>7 days forecast</h1>\r\n        </div>\r\n        {DailyList()}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nlet DayItem = (props) => {\r\n  let { temp, weather, dt } = props.element;\r\n  const [showDetails, setShowDetails] = useState(false);\r\n  let { max, min } = temp;\r\n  let { description } = weather[0];\r\n  let date = new Date(dt * 1000);\r\n  let strDate = date.toString().slice(0, 7).split(\" \");\r\n  let day = strDate[0];\r\n  let dayNumber = date.getUTCDate();\r\n  let month = strDate[1];\r\n  return (\r\n    <>\r\n      <section\r\n        className={`daily-card_details ${description.replace(\" \", \"_\")}`}\r\n        onClick={() => setShowDetails(!showDetails)}\r\n      >\r\n        <div className=\"daily-card_details-header\">\r\n          <div className=\"daily-card_date_wrapper\">\r\n            <span>\r\n              {day} {dayNumber < 10 ? \"0\" + dayNumber : dayNumber} , {month}\r\n            </span>\r\n          </div>\r\n          <i\r\n            className={`wu wu-${iconKey(description)} wu-64 wu-solid-white`}\r\n          ></i>\r\n          <div className=\"daily-card_temperatures\">\r\n            <p>{Math.round(max)}°C</p>\r\n            <p>/ {Math.round(min)}°C</p>\r\n          </div>\r\n          <div className=\"description_wrapper\">\r\n            <p>\r\n              {description.split(\" \")[0]} <br />{\" \"}\r\n              {description.split(\" \")[1] !== null\r\n                ? description.split(\" \")[1]\r\n                : \"\"}\r\n            </p>\r\n          </div>\r\n          <h3 className={`arrow-icon ${showDetails ? \"rotate-180\" : \"\"}`}>\r\n            <BiChevronsUp size={32} />\r\n          </h3>\r\n        </div>\r\n        <DayDetails element={props.element} showDetails={showDetails} />\r\n      </section>\r\n    </>\r\n  );\r\n};\r\nlet DayDetails = ({ element, showDetails }) => {\r\n  const panelReference = useRef(null);\r\n  const itemContentReference = useRef(null);\r\n\r\n  let { sunrise, sunset, temp, humidity, pressure, wind_speed } = element;\r\n  let { night, eve, morn } = temp;\r\n  let sunriseDate = new Date(sunrise * 1000),\r\n    sunriseHour = sunriseDate.getHours(),\r\n    sunriseMinutes = sunriseDate.getMinutes();\r\n  let sunsetDate = new Date(sunset * 1000),\r\n    sunsetHour = sunsetDate.getHours(),\r\n    sunsetMinutes = sunsetDate.getMinutes();\r\n  return (\r\n    <div\r\n      className={`daily-card_details-item-contet ${\r\n        showDetails ? \"show-details\" : \"\"\r\n      }`}\r\n    >\r\n      <div className=\"panel left\" ref={panelReference}>\r\n        <p>\r\n          Sunrise:{\" \"}\r\n          <span>\r\n            {sunriseHour}:\r\n            {sunriseMinutes < 10 ? \"0\" + sunriseMinutes : sunriseMinutes} am\r\n          </span>\r\n        </p>\r\n        <p>\r\n          Sunset:{\" \"}\r\n          <span>\r\n            {sunsetHour}:\r\n            {sunsetMinutes < 10 ? \"0\" + sunsetMinutes : sunsetMinutes} am\r\n          </span>\r\n        </p>\r\n        <p>\r\n          Humidity <span>{humidity}%</span>\r\n        </p>\r\n        <p>\r\n          Wind speed <span>{wind_speed}</span>\r\n        </p>\r\n      </div>\r\n      <div className=\"panel\">\r\n        <p>\r\n          Morning: <span>{morn}°C</span>\r\n        </p>\r\n        <p>\r\n          Evening: <span>{eve}°C</span>\r\n        </p>\r\n        <p>\r\n          night: <span>{night}°C</span>\r\n        </p>\r\n        <p>\r\n          Presure: <span>{pressure} hPa</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Daily;\r\n","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\Hourly.js",["49"],"import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"./Chart\";\r\nimport { iconKey } from \"./WeatherCard\";\r\nimport { BiChevronsUp } from \"react-icons/bi\";\r\nimport \"./css/Hour.css\";\r\nconst Hourly = ({ details }) => {\r\n  const [hours, setHours] = useState([]);\r\n  console.log(details);\r\n\r\n  let createHourlyItems = () => {\r\n    return details.slice(0, 24).map((element) => {\r\n      let {\r\n        dt,\r\n        temp,\r\n        feels_like,\r\n        pressure,\r\n        humidity,\r\n        visibility,\r\n        wind_speed,\r\n        dew_point,\r\n        weather,\r\n      } = element;\r\n\r\n      return (\r\n        <HourlyItem\r\n          dt={dt}\r\n          temp={temp}\r\n          feels_like={feels_like}\r\n          pressure={pressure}\r\n          humidity={humidity}\r\n          visibility={visibility}\r\n          wind_speed={wind_speed}\r\n          dew_point={dew_point}\r\n          weather={weather}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setHours(\r\n      details.slice(0, 24).map((element, index) => {\r\n        let date = new Date(element.dt * 1000);\r\n        let hour = date.getHours();\r\n\r\n        return {\r\n          name: `${\r\n            index === 0 ? \"\" : `${hour < 11 ? `0${hour} am` : `${hour} pm`}`\r\n          }`,\r\n          hour: hour,\r\n          temp: element.temp,\r\n          label: `${Math.round(element.temp)}`,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h1>Hourly forecast</h1>\r\n      <Chart data={hours} />\r\n      {createHourlyItems()}\r\n    </>\r\n  );\r\n};\r\nlet HourlyItem = ({\r\n  dt,\r\n  temp,\r\n  feels_like,\r\n  pressure,\r\n  humidity,\r\n  visibility,\r\n  wind_speed,\r\n  dew_point,\r\n  weather,\r\n}) => {\r\n  let [showDetails, setShowDetails] = useState(false);\r\n  let date = new Date(dt * 1000);\r\n  let strDate = date.toString().slice(0, 7).split(\" \");\r\n  let day = strDate[0];\r\n  let dayNumber = date.getUTCDate();\r\n  let { description } = weather[0];\r\n  let hour = date.getHours();\r\n  return (\r\n    <>\r\n      <div\r\n        className={`hourly-card-container ${description.replace(\" \", \"_\")}`}\r\n        onClick={() => {\r\n          setShowDetails(!showDetails);\r\n        }}\r\n      >\r\n        <div className=\"hourly-card-header\">\r\n          <div className=\"hourly-card-date-wrapper\">\r\n            <span>\r\n              {hour < 10 ? \"0\" + hour : hour} {hour < 12 ? \"am\" : \"pm\"} {day}{\" \"}\r\n              {dayNumber < 10 ? \"0\" + dayNumber : dayNumber}\r\n            </span>\r\n          </div>\r\n          <span>\r\n            {Math.round(temp) < 10 ? \"0\" + Math.round(temp) : Math.round(temp)}\r\n            °C\r\n          </span>\r\n          <i\r\n            className={`wu wu-${iconKey(description)} wu-64 wu-solid-white`}\r\n          ></i>\r\n          <div className=\"hourly-card-description-wrapper\">\r\n            <span>\r\n              {description.split(\" \")[0]}\r\n              <br />\r\n              {description.split(\" \")[1]}{\" \"}\r\n            </span>\r\n          </div>\r\n          <h3 className={`arrow-icon ${showDetails ? \"rotate-180\" : \"\"}`}>\r\n            <BiChevronsUp size={32} />\r\n          </h3>\r\n        </div>\r\n\r\n        <HourDetail\r\n          feels_like={feels_like}\r\n          pressure={pressure}\r\n          humidity={humidity}\r\n          visibility={visibility}\r\n          wind_speed={wind_speed}\r\n          dew_point={dew_point}\r\n          showDetails={showDetails}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst HourDetail = ({\r\n  feels_like,\r\n  pressure,\r\n  humidity,\r\n  visibility,\r\n  wind_speed,\r\n  dew_point,\r\n  showDetails,\r\n}) => {\r\n  return (\r\n    <div\r\n      className={`hourly-card-details-item-content ${\r\n        showDetails ? \"hourly-show-details\" : \"\"\r\n      }`}\r\n    >\r\n      <div className=\"panel left\">\r\n        <p>\r\n          Feels like: <span>{feels_like} °C</span>\r\n        </p>\r\n        <p>\r\n          Pressure: <span>{pressure} hPa</span>\r\n        </p>\r\n        <p>\r\n          humidity <span>{humidity} %</span>\r\n        </p>\r\n      </div>\r\n      <div className=\"panel\">\r\n        <p>\r\n          Visibility: <span>{visibility / 1000} km</span>\r\n        </p>\r\n        <p>\r\n          Wind speed: <span>{wind_speed} km</span>\r\n        </p>\r\n        <p>\r\n          Dew point: <span>{dew_point} °C</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hourly;\r\n","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\Chart.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\Navbar.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":38,"column":11,"nodeType":"56","messageId":"57","endLine":38,"endColumn":15},{"ruleId":"58","severity":1,"message":"59","line":80,"column":47,"nodeType":"60","messageId":"61","endLine":80,"endColumn":49},{"ruleId":"58","severity":1,"message":"59","line":86,"column":47,"nodeType":"60","messageId":"61","endLine":86,"endColumn":49},{"ruleId":"58","severity":1,"message":"59","line":92,"column":47,"nodeType":"60","messageId":"61","endLine":92,"endColumn":49},{"ruleId":"54","severity":1,"message":"62","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":26},{"ruleId":"54","severity":1,"message":"63","line":1,"column":28,"nodeType":"56","messageId":"57","endLine":1,"endColumn":36},{"ruleId":"54","severity":1,"message":"64","line":1,"column":27,"nodeType":"56","messageId":"57","endLine":1,"endColumn":36},{"ruleId":"54","severity":1,"message":"65","line":2,"column":10,"nodeType":"56","messageId":"57","endLine":2,"endColumn":18},{"ruleId":"54","severity":1,"message":"66","line":74,"column":9,"nodeType":"56","messageId":"57","endLine":74,"endColumn":29},{"ruleId":"67","severity":1,"message":"68","line":56,"column":6,"nodeType":"69","endLine":56,"endColumn":8,"suggestions":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'city' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Component' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useFetch' is defined but never used.","'itemContentReference' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'details'. Either include it or remove the dependency array. If 'setHours' needs the current value of 'details', you can also switch to useReducer instead of useState and read 'details' in the reducer.","ArrayExpression",["73"],"no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},"Update the dependencies array to be: [details]",{"range":"76","text":"77"},[1388,1390],"[details]"]