[{"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\index.js":"1","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\App.js":"2","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\chart\\index.js":"3","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\chart\\Chart.js":"4","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\navbar\\index.js":"5","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\navbar\\Navbar.js":"6","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\daily\\Daily.js":"7","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\hourly\\Hourly.js":"8","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\weatherCard\\WeatherCard.js":"9","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\weathercard\\index.js":"10","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\weathercard\\WeatherCard.js":"11","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\home\\index.js":"12","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\home\\Home.js":"13","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\location\\index.js":"14","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\location\\Location.js":"15","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\useFetch.js":"16","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\error\\index.js":"17","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\error\\Error.js":"18","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\utils\\tempUtils.js":"19"},{"size":278,"mtime":1607639771932,"results":"20","hashOfConfig":"21"},{"size":1175,"mtime":1608855457015,"results":"22","hashOfConfig":"21"},{"size":36,"mtime":1608000817186,"results":"23","hashOfConfig":"21"},{"size":1516,"mtime":1608762800938,"results":"24","hashOfConfig":"21"},{"size":37,"mtime":1608001102454,"results":"25","hashOfConfig":"21"},{"size":5132,"mtime":1608859659657,"results":"26","hashOfConfig":"21"},{"size":4947,"mtime":1608862403131,"results":"27","hashOfConfig":"21"},{"size":5220,"mtime":1608862155780,"results":"28","hashOfConfig":"21"},{"size":3198,"mtime":1608001940760,"results":"29","hashOfConfig":"21"},{"size":51,"mtime":1608002318546,"results":"30","hashOfConfig":"21"},{"size":5656,"mtime":1608857476753,"results":"31","hashOfConfig":"21"},{"size":35,"mtime":1608009011990,"results":"32","hashOfConfig":"21"},{"size":4565,"mtime":1608862099239,"results":"33","hashOfConfig":"21"},{"size":39,"mtime":1608049236634,"results":"34","hashOfConfig":"21"},{"size":4916,"mtime":1608762901797,"results":"35","hashOfConfig":"21"},{"size":725,"mtime":1608323827420,"results":"36","hashOfConfig":"21"},{"size":36,"mtime":1608613084120,"results":"37","hashOfConfig":"21"},{"size":424,"mtime":1608613935666,"results":"38","hashOfConfig":"21"},{"size":137,"mtime":1608862181926,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1846mn",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\index.js",[],["81","82"],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\App.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\chart\\index.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\chart\\Chart.js",["83","84","85"],"import React from \"react\";\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  LabelList,\r\n} from \"recharts\";\r\nconst Chart = ({ data, screenWidth }) => {\r\n  const maxTemp = Math.max.apply(\r\n    Math,\r\n    data.map(function (element) {\r\n      return element.temp;\r\n    })\r\n  );\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <ResponsiveContainer\r\n        width={\"100%\"}\r\n        height={screenWidth < 600 ? 125 : 200}\r\n      >\r\n        <AreaChart\r\n          data={data}\r\n          margin={{\r\n            top: 10,\r\n            right: 20,\r\n            left: 20,\r\n            bottom: 0,\r\n          }}\r\n          isAnimationActive={false}\r\n        >\r\n          {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\r\n          <XAxis dataKey=\"name\" style={{ fill: \"#fff\" }} />\r\n          {/* <YAxis\r\n            type=\"number\"\r\n            domain={[\"auto\", maxTemp + 2]}\r\n            style={{ fill: \"#fff\" }}\r\n          /> */}\r\n          <Tooltip />\r\n          <Area\r\n            type=\"monotone\"\r\n            dataKey=\"temp\"\r\n            strokeWidth=\"4\"\r\n            stroke=\"rgb(255, 153, 85)\"\r\n            fill=\"rgb(255, 153, 85,0.431)\"\r\n            isAnimationActive={false}\r\n          >\r\n            <LabelList\r\n              dataKey=\"label\"\r\n              position=\"top\"\r\n              style={{ fill: \"#fff\" }}\r\n            ></LabelList>\r\n          </Area>\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\navbar\\index.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\navbar\\Navbar.js",["86","87"],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\daily\\Daily.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\hourly\\Hourly.js",["88","89"],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\weatherCard\\WeatherCard.js",["90","91"],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\weathercard\\index.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\weathercard\\WeatherCard.js",["92"],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\home\\index.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\home\\Home.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\location\\index.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\location\\Location.js",["93"],"import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { fetchLocation, fetchAllInOneCall } from \"../../useFetch\";\r\nimport NavBar from \"../../components/navbar\";\r\nimport WeatherCard from \"../../components/weathercard\";\r\nimport Daily from \"../../components/daily/Daily\";\r\nimport Hourly from \"../../components/hourly/Hourly\";\r\nimport { TileLayer, MapContainer, Marker, Popup } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport L from \"leaflet\";\r\nimport icon from \"leaflet/dist/images/marker-icon.png\";\r\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\r\nimport countryList from \"../../components/navbar/country_list.json\";\r\nimport { useHistory } from \"react-router-dom\";\r\nlet DefaultIcon = L.icon({\r\n  iconUrl: icon,\r\n  shadowUrl: iconShadow,\r\n});\r\n\r\nL.Marker.prototype.options.icon = DefaultIcon;\r\nconst Location = ({ screenWidth }) => {\r\n  const history = useHistory();\r\n  const { location, latitude, longitude, countryCode } = useParams();\r\n  const [currentDetails, setCurrent] = useState([]);\r\n  const [locationDetails, setLocationDetails] = useState([]);\r\n  const [selectedTab, setSelectedTab] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [countryName, setCountryName] = useState(\"\");\r\n  const key = \"05e47cb6f8fc8afa437fc32af1218b36\";\r\n  const handleChange = (newValue) => {\r\n    setSelectedTab(newValue);\r\n  };\r\n  const oneCall = (latitude, longitude) => {\r\n    fetchAllInOneCall(key, latitude, longitude)\r\n      .then((data) => {\r\n        setLocationDetails(data);\r\n        setLoading(false);\r\n        setSelectedTab(0);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    if (\r\n      location != null &&\r\n      latitude != null &&\r\n      longitude != null &&\r\n      countryCode != null\r\n    ) {\r\n      setCountryName(\r\n        countryList.find((country) => {\r\n          return country.country_code === countryCode;\r\n        }).name\r\n      );\r\n      fetchLocation(location, countryCode, key)\r\n        .then((data) => {\r\n          setCurrent(data);\r\n          if (latitude != null && longitude != null) {\r\n            oneCall(latitude, longitude);\r\n          } else {\r\n            oneCall(data.coord.lat, data.coord.lon);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } else {\r\n      history.push(\"/*\");\r\n    }\r\n  }, [location, countryCode]);\r\n  if (loading) return <h4>Loading...</h4>;\r\n\r\n  return (\r\n    <>\r\n      <NavBar\r\n        city={location}\r\n        temp={locationDetails.current.temp}\r\n        screenWidth={screenWidth}\r\n      />\r\n      <main>\r\n        <WeatherCard\r\n          city={location}\r\n          unit=\"celcius\"\r\n          dt={locationDetails.current.dt}\r\n          details={currentDetails}\r\n          timezone_offset={locationDetails.timezone_offset}\r\n          country={countryName}\r\n          screenWidth={screenWidth}\r\n        />\r\n        <div className=\"btn-container\">\r\n          <button\r\n            className={`tab-btn ${selectedTab === 0 && \"active-btn\"}`}\r\n            onClick={() => handleChange(0)}\r\n          >\r\n            Daily\r\n          </button>\r\n          <button\r\n            className={`tab-btn ${selectedTab === 1 && \"active-btn\"}`}\r\n            onClick={() => handleChange(1)}\r\n          >\r\n            Hourly\r\n          </button>\r\n        </div>\r\n        <div className=\"main-container\">\r\n          {selectedTab === 0 && (\r\n            <Daily\r\n              details={locationDetails}\r\n              location={location}\r\n              screenWidth={screenWidth}\r\n            />\r\n          )}\r\n          {selectedTab === 1 && (\r\n            <Hourly\r\n              details={locationDetails.hourly}\r\n              timezone_offset={locationDetails.timezone_offset}\r\n              screenWidth={screenWidth}\r\n            />\r\n          )}\r\n          <Map\r\n            latitude={currentDetails.coord.lat}\r\n            longitude={currentDetails.coord.lon}\r\n          />\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\nconst Map = ({ latitude, longitude }) => {\r\n  const position = [latitude, longitude];\r\n  return (\r\n    <MapContainer center={position} zoom={6}>\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      <TileLayer\r\n        url={`https://tile.openweathermap.org/map/clouds_new/{z}/{x}/{y}.png?appid=2c0a3c0e504032c9e73c695b431c4624`}\r\n      />\r\n      <TileLayer\r\n        url={`https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=2c0a3c0e504032c9e73c695b431c4624`}\r\n      />\r\n      <Marker position={position}>\r\n        <Popup>\r\n          A pretty CSS3 popup. <br /> Easily customizable.\r\n        </Popup>\r\n      </Marker>\r\n    </MapContainer>\r\n  );\r\n};\r\nexport default Location;\r\n","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\useFetch.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\error\\index.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\error\\Error.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\utils\\tempUtils.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":6,"column":3,"nodeType":"100","messageId":"101","endLine":6,"endColumn":8},{"ruleId":"98","severity":1,"message":"102","line":7,"column":3,"nodeType":"100","messageId":"101","endLine":7,"endColumn":16},{"ruleId":"98","severity":1,"message":"103","line":13,"column":9,"nodeType":"100","messageId":"101","endLine":13,"endColumn":16},{"ruleId":"98","severity":1,"message":"104","line":13,"column":10,"nodeType":"100","messageId":"101","endLine":13,"endColumn":19},{"ruleId":"98","severity":1,"message":"105","line":13,"column":21,"nodeType":"100","messageId":"101","endLine":13,"endColumn":33},{"ruleId":"106","severity":1,"message":"107","line":58,"column":6,"nodeType":"108","endLine":58,"endColumn":8,"suggestions":"109"},{"ruleId":"106","severity":1,"message":"110","line":59,"column":3,"nodeType":"100","endLine":59,"endColumn":12,"suggestions":"111"},{"ruleId":"98","severity":1,"message":"112","line":1,"column":17,"nodeType":"100","messageId":"101","endLine":1,"endColumn":26},{"ruleId":"98","severity":1,"message":"113","line":1,"column":28,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"98","severity":1,"message":"113","line":1,"column":29,"nodeType":"100","messageId":"101","endLine":1,"endColumn":37},{"ruleId":"106","severity":1,"message":"114","line":70,"column":6,"nodeType":"108","endLine":70,"endColumn":29,"suggestions":"115"},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"no-unused-vars","'YAxis' is defined but never used.","Identifier","unusedVar","'CartesianGrid' is defined but never used.","'maxTemp' is assigned a value but never used.","'showInput' is assigned a value but never used.","'setShowInput' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'details' and 'timezone_offset'. Either include them or remove the dependency array. If 'setHours' needs the current value of 'details', you can also switch to useReducer instead of useState and read 'details' in the reducer.","ArrayExpression",["118"],"React Hook useEffect contains a call to 'setDisplayChart'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [screenWidth] as a second argument to the useEffect Hook.",["119"],"'Component' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'latitude', and 'longitude'. Either include them or remove the dependency array.",["120"],"no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [details, timezone_offset]",{"range":"127","text":"128"},"Add dependencies array: [screenWidth]",{"range":"129","text":"130"},"Update the dependencies array to be: [location, countryCode, latitude, longitude, history]",{"range":"131","text":"132"},[1610,1612],"[details, timezone_offset]",[1713,1713],", [screenWidth]",[2440,2463],"[location, countryCode, latitude, longitude, history]"]