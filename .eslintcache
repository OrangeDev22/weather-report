[{"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\index.js":"1","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\App.js":"2","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\chart\\index.js":"3","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\chart\\Chart.js":"4","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\navbar\\index.js":"5","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\navbar\\Navbar.js":"6","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\daily\\Daily.js":"7","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\hourly\\Hourly.js":"8","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\weatherCard\\WeatherCard.js":"9","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\weathercard\\index.js":"10","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\weathercard\\WeatherCard.js":"11","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\home\\index.js":"12","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\home\\Home.js":"13","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\location\\index.js":"14","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\location\\Location.js":"15","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\useFetch.js":"16"},{"size":278,"mtime":1607639771932,"results":"17","hashOfConfig":"18"},{"size":990,"mtime":1608336418008,"results":"19","hashOfConfig":"18"},{"size":36,"mtime":1608000817186,"results":"20","hashOfConfig":"18"},{"size":1512,"mtime":1608357423201,"results":"21","hashOfConfig":"18"},{"size":37,"mtime":1608001102454,"results":"22","hashOfConfig":"18"},{"size":4019,"mtime":1608445695595,"results":"23","hashOfConfig":"18"},{"size":4365,"mtime":1608447656302,"results":"24","hashOfConfig":"18"},{"size":4854,"mtime":1608446795804,"results":"25","hashOfConfig":"18"},{"size":3198,"mtime":1608001940760,"results":"26","hashOfConfig":"18"},{"size":51,"mtime":1608002318546,"results":"27","hashOfConfig":"18"},{"size":5366,"mtime":1608447270745,"results":"28","hashOfConfig":"18"},{"size":35,"mtime":1608009011990,"results":"29","hashOfConfig":"18"},{"size":4693,"mtime":1608445817373,"results":"30","hashOfConfig":"18"},{"size":39,"mtime":1608049236634,"results":"31","hashOfConfig":"18"},{"size":4612,"mtime":1608445767160,"results":"32","hashOfConfig":"18"},{"size":725,"mtime":1608323827420,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1846mn",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\index.js",[],["72","73"],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\App.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\chart\\index.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\chart\\Chart.js",["74","75"],"import React from \"react\";\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  LabelList,\r\n} from \"recharts\";\r\nconst Chart = ({ data, screenWidth }) => {\r\n  const maxTemp = Math.max.apply(\r\n    Math,\r\n    data.map(function (element) {\r\n      return element.temp;\r\n    })\r\n  );\r\n  console.log(screenWidth);\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <ResponsiveContainer width={\"95%\"} height={screenWidth < 600 ? 200 : 400}>\r\n        <AreaChart\r\n          data={data}\r\n          margin={{\r\n            top: 10,\r\n            // right: 30,\r\n            left: 0,\r\n            bottom: 0,\r\n          }}\r\n          isAnimationActive={false}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" style={{ fill: \"#fff\" }} />\r\n          {/* <YAxis\r\n            type=\"number\"\r\n            domain={[\"auto\", maxTemp + 2]}\r\n            style={{ fill: \"#fff\" }}\r\n          /> */}\r\n          <Tooltip />\r\n          <Area\r\n            type=\"monotone\"\r\n            dataKey=\"temp\"\r\n            strokeWidth=\"4\"\r\n            stroke=\"rgb(255, 153, 85)\"\r\n            fill=\"rgb(255, 153, 85,0.431)\"\r\n            isAnimationActive={false}\r\n          >\r\n            <LabelList\r\n              dataKey=\"label\"\r\n              position=\"top\"\r\n              style={{ fill: \"#fff\" }}\r\n            ></LabelList>\r\n          </Area>\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n",["76","77"],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\navbar\\index.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\navbar\\Navbar.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\daily\\Daily.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\hourly\\Hourly.js",["78","79"],"import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"../chart\";\r\nimport { iconKey } from \"../weathercard\";\r\nimport { BiChevronsUp } from \"react-icons/bi\";\r\nimport \"../../css/Hour.css\";\r\nconst Hourly = ({ details, timezone_offset, screenWidth }) => {\r\n  const [hours, setHours] = useState([]);\r\n  const [displayChart, setDisplayChart] = useState(true);\r\n  let createHourlyItems = () => {\r\n    console.log(\"Screen width\", screenWidth);\r\n    return details.slice(0, 24).map((element) => {\r\n      let {\r\n        dt,\r\n        temp,\r\n        feels_like,\r\n        pressure,\r\n        humidity,\r\n        visibility,\r\n        wind_speed,\r\n        dew_point,\r\n        weather,\r\n      } = element;\r\n      let time = dt + timezone_offset;\r\n      return (\r\n        <HourlyItem\r\n          dt={time}\r\n          temp={temp}\r\n          feels_like={feels_like}\r\n          pressure={pressure}\r\n          humidity={humidity}\r\n          visibility={visibility}\r\n          wind_speed={wind_speed}\r\n          dew_point={dew_point}\r\n          weather={weather}\r\n          screenWidth={screenWidth}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setHours(\r\n      details.slice(0, 24).map((element, index) => {\r\n        let time = element.dt + timezone_offset;\r\n        let date = new Date(time * 1000);\r\n        let hour = date.getUTCHours();\r\n\r\n        return {\r\n          name: `${index === 0 ? \"\" : `${hour}`}`,\r\n          hour: hour,\r\n          temp: element.temp,\r\n          label: `${Math.round(element.temp)}`,\r\n        };\r\n      })\r\n    );\r\n  }, []);\r\n  useEffect(() => {\r\n    screenWidth < 600 ? setDisplayChart(false) : setDisplayChart(true);\r\n  });\r\n  return (\r\n    <>\r\n      <div className=\"hourly-header\">\r\n        <h1>Hourly forecast</h1>\r\n      </div>\r\n      {displayChart && (\r\n        <Chart\r\n          data={hours}\r\n          timezone_offset={timezone_offset}\r\n          screenWidth={screenWidth}\r\n        />\r\n      )}\r\n      {createHourlyItems()}\r\n    </>\r\n  );\r\n};\r\nlet HourlyItem = ({\r\n  dt,\r\n  temp,\r\n  feels_like,\r\n  pressure,\r\n  humidity,\r\n  visibility,\r\n  wind_speed,\r\n  dew_point,\r\n  weather,\r\n  screenWidth,\r\n}) => {\r\n  let [showDetails, setShowDetails] = useState(false);\r\n  let date = new Date(dt * 1000);\r\n  let strDate = date.toString().slice(0, 7).split(\" \");\r\n  let day = strDate[0];\r\n  let dayNumber = date.getUTCDate();\r\n  let { description } = weather[0];\r\n  let hour = date.getUTCHours();\r\n  return (\r\n    <>\r\n      <div\r\n        className={`hourly-card-container ${description.replace(\" \", \"_\")}`}\r\n        onClick={() => {\r\n          setShowDetails(!showDetails);\r\n        }}\r\n      >\r\n        <div className=\"hourly-card-header\">\r\n          <div className=\"hourly-card-date-wrapper\">\r\n            <span>\r\n              {hour < 10 ? \"0\" + hour : hour} {hour < 12 ? \"am\" : \"pm\"} {day}{\" \"}\r\n              {dayNumber < 10 ? \"0\" + dayNumber : dayNumber}\r\n            </span>\r\n          </div>\r\n          <span>\r\n            {Math.round(temp) < 10 ? \"0\" + Math.round(temp) : Math.round(temp)}\r\n            °C\r\n          </span>\r\n          <i\r\n            className={`wu wu-${iconKey(description)} wu-${\r\n              screenWidth < 600 ? \"32\" : \"64\"\r\n            } wu-solid-white`}\r\n          ></i>\r\n          <div className=\"hourly-card-description-wrapper\">\r\n            <span>\r\n              {description.split(\" \")[0]}\r\n              <br />\r\n              {description.split(\" \")[1]}{\" \"}\r\n            </span>\r\n          </div>\r\n          <h3 className={`arrow-icon ${showDetails ? \"rotate-180\" : \"\"}`}>\r\n            <BiChevronsUp size={screenWidth < 600 ? 16 : 32} />\r\n          </h3>\r\n        </div>\r\n\r\n        <HourDetail\r\n          feels_like={feels_like}\r\n          pressure={pressure}\r\n          humidity={humidity}\r\n          visibility={visibility}\r\n          wind_speed={wind_speed}\r\n          dew_point={dew_point}\r\n          showDetails={showDetails}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst HourDetail = ({\r\n  feels_like,\r\n  pressure,\r\n  humidity,\r\n  visibility,\r\n  wind_speed,\r\n  dew_point,\r\n  showDetails,\r\n}) => {\r\n  return (\r\n    <div\r\n      className={`hourly-card-details-item-content ${\r\n        showDetails ? \"hourly-show-details\" : \"\"\r\n      }`}\r\n    >\r\n      <div className=\"panel left\">\r\n        <p>\r\n          Feels like: <span>{feels_like} °C</span>\r\n        </p>\r\n        <p>\r\n          Pressure: <span>{pressure} hPa</span>\r\n        </p>\r\n        <p>\r\n          humidity <span>{humidity} %</span>\r\n        </p>\r\n      </div>\r\n      <div className=\"panel\">\r\n        <p>\r\n          Visibility: <span>{visibility / 1000} km</span>\r\n        </p>\r\n        <p>\r\n          Wind speed: <span>{wind_speed} km</span>\r\n        </p>\r\n        <p>\r\n          Dew point: <span>{dew_point} °C</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hourly;\r\n","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\weatherCard\\WeatherCard.js",["80","81"],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\weathercard\\index.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\components\\weathercard\\WeatherCard.js",["82"],"import React, { useReducer, useState, useEffect } from \"react\";\r\nimport { WiHumidity, WiBarometer } from \"react-icons/wi\";\r\nimport { MdVisibility } from \"react-icons/md\";\r\nconst WeatherCard = ({\r\n  city,\r\n  unit,\r\n  dt,\r\n  timezone_offset,\r\n  details,\r\n  country,\r\n  screenWidth,\r\n}) => {\r\n  const convertTemperature = (temperature) => {\r\n    return unit === \"celcius\" ? temperature : (temperature * 9) / 5 - 459.67;\r\n  };\r\n  const defaultState = {\r\n    cityName: \"\",\r\n    date: \"\",\r\n    hours: \"\",\r\n    minutes: \"\",\r\n    temp: 0,\r\n    pressure: 0,\r\n    humidity: 0,\r\n    visibility: 0,\r\n    description: \"\",\r\n    mainDescription: \"\",\r\n    country: \"\",\r\n  };\r\n  const { main, weather } = details;\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const getMonth = (month) => {\r\n    return months[parseInt(month)];\r\n  };\r\n  const reducer = (state, action) => {\r\n    let unix_timestamp = dt + timezone_offset;\r\n    let time = new Date(unix_timestamp * 1000);\r\n    if (action.type === \"SET_WEATHER_CARD\") {\r\n      return {\r\n        cityName: city,\r\n        day: time.getUTCDate(),\r\n        month: time.getUTCMonth(),\r\n        hour: time.getUTCHours(),\r\n        minutes: time.getUTCMinutes(),\r\n        temp: main.temp,\r\n        pressure: main.pressure,\r\n        humidity: main.humidity,\r\n        visibility: details.visibility,\r\n        description: weather[0].description,\r\n        mainDescription: weather[0].main,\r\n        country: country,\r\n      };\r\n    }\r\n\r\n    return state;\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reducer, defaultState);\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: \"SET_WEATHER_CARD\" });\r\n  }, []);\r\n\r\n  let dayTime = () => {\r\n    return state.hour < 17 ? \"day\" : \"night\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"weather-card\">\r\n        <div\r\n          className={`weather-card-wrapper ${state.description.replace(\r\n            \" \",\r\n            \"_\"\r\n          )}`}\r\n        >\r\n          <div className=\"weather-card-title\">\r\n            <p>\r\n              {screenWidth < 600 ? \"\" : \"Weather at\"} {state.cityName}{\" \"}\r\n              {screenWidth < 600 ? \"\" : state.country}\r\n            </p>\r\n            <div className=\"time-wrapper\">\r\n              <p>\r\n                {`${getMonth(state.month)} `}\r\n                {`${state.day} `}\r\n                {state.hour}:\r\n                {state.minutes < 10 ? \"0\" + state.minutes : state.minutes}{\" \"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"weather-card-panel-wrapper\">\r\n            <div className=\"weather-card_panel\">\r\n              <div className=\"weather-card_panel main\">\r\n                <div\r\n                  className={`wu wu-${iconKey(state.description)} wu-${\r\n                    screenWidth < 400 ? \"64\" : \"128\"\r\n                  } wu-solid-white wu-${dayTime()}`}\r\n                ></div>\r\n                <p className=\"temperature\">\r\n                  {Math.round(convertTemperature(state.temp))}°{\"\"}\r\n                  {unit === \"celcius\" ? \"c\" : \"f\"}\r\n                </p>\r\n              </div>\r\n              <div className=\"details-container\">\r\n                <div className=\"detail-wrapper\">\r\n                  <WiBarometer size={22} />\r\n                  <p>{state.pressure} hPa</p>\r\n                </div>\r\n                <div className=\"detail-wrapper\">\r\n                  <WiHumidity size={22} />\r\n                  <p>{state.humidity}%</p>\r\n                </div>\r\n                <div className=\"detail-wrapper\">\r\n                  <MdVisibility size={22} />\r\n                  <p>{state.visibility / 1000} km</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"description_container\">\r\n                {screenWidth < 600 || (\r\n                  <h4 className=\"weather_description\">\r\n                    {state.mainDescription}\r\n                  </h4>\r\n                )}\r\n                <p className=\"weather_description\">{state.description}</p>\r\n              </div>\r\n            </div>\r\n            {screenWidth < 600 || (\r\n              <section className=\"weather-card_panel-right details\">\r\n                <p className=\"details\">Pressure: {state.pressure} hPa</p>\r\n                <p className=\"details\">Humidity: {state.humidity}%</p>\r\n                <p className=\"details\">\r\n                  visibility: {state.visibility / 1000} km\r\n                </p>\r\n                <button className=\"btn\">Show more</button>\r\n              </section>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport let iconKey = (element) => {\r\n  switch (element) {\r\n    case \"clear sky\":\r\n      return \"clear\";\r\n    case \"few clouds\":\r\n      return \"mostlycloudy\";\r\n    case \"scattered clouds\":\r\n      return \"partlycloudy\";\r\n    case \"broken clouds\":\r\n      return \"cloudy\";\r\n    case \"overcast clouds\":\r\n      return \"cloudy\";\r\n    case \"shower rain\":\r\n      return \"flurries\";\r\n    case \"rain\":\r\n      return \"rain\";\r\n    case \"light rain\":\r\n      return \"flurries\";\r\n    case \"thunderstorm\":\r\n      return \"tstorms\";\r\n    case \"snow\":\r\n      return \"snow\";\r\n    case \"mist\":\r\n      return \"fog\";\r\n    default:\r\n      return \"unknown\";\r\n  }\r\n};\r\nexport default WeatherCard;\r\n","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\home\\index.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\home\\Home.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\location\\index.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\pages\\location\\Location.js",["83"],"import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { fetchLocation, fetchAllInOneCall } from \"../../useFetch\";\r\nimport NavBar from \"../../components/navbar\";\r\nimport WeatherCard from \"../../components/weathercard\";\r\nimport Daily from \"../../components/daily/Daily\";\r\nimport Hourly from \"../../components/hourly/Hourly\";\r\nimport { TileLayer, MapContainer, Marker, Popup } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport L from \"leaflet\";\r\nimport icon from \"leaflet/dist/images/marker-icon.png\";\r\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\r\nimport countryList from \"../../components/navbar/country_list.json\";\r\nlet DefaultIcon = L.icon({\r\n  iconUrl: icon,\r\n  shadowUrl: iconShadow,\r\n});\r\n\r\nL.Marker.prototype.options.icon = DefaultIcon;\r\nconst Location = ({ screenWidth }) => {\r\n  const { location, latitude, longitude, countryCode } = useParams();\r\n  const [currentDetails, setCurrent] = useState([]);\r\n  const [locationDetails, setLocationDetails] = useState([]);\r\n  const [selectedTab, setSelectedTab] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [countryName, setCountryName] = useState(\"\");\r\n  const key = \"05e47cb6f8fc8afa437fc32af1218b36\";\r\n  const handleChange = (newValue) => {\r\n    setSelectedTab(newValue);\r\n  };\r\n  const oneCall = (latitude, longitude) => {\r\n    fetchAllInOneCall(key, latitude, longitude)\r\n      .then((data) => {\r\n        setLocationDetails(data);\r\n        setLoading(false);\r\n        setSelectedTab(0);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setCountryName(\r\n      countryList.find((country) => {\r\n        return country.country_code === countryCode;\r\n      }).name\r\n    );\r\n    fetchLocation(location, countryCode, key)\r\n      .then((data) => {\r\n        setCurrent(data);\r\n        if (latitude != null && longitude != null) {\r\n          oneCall(latitude, longitude);\r\n        } else {\r\n          oneCall(data.coord.lat, data.coord.lon);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [location]);\r\n  if (loading) return <h4>Loading...</h4>;\r\n\r\n  return (\r\n    <>\r\n      <NavBar\r\n        city={location}\r\n        temp={locationDetails.current.temp}\r\n        screenWidth={screenWidth}\r\n      />\r\n      <main>\r\n        <WeatherCard\r\n          city={location}\r\n          unit=\"celcius\"\r\n          dt={locationDetails.current.dt}\r\n          details={currentDetails}\r\n          timezone_offset={locationDetails.timezone_offset}\r\n          country={countryName}\r\n          screenWidth={screenWidth}\r\n        />\r\n        <div className=\"btn-container\">\r\n          <button\r\n            className={`tab-btn ${selectedTab === 0 && \"active-btn\"}`}\r\n            onClick={() => handleChange(0)}\r\n          >\r\n            Daily\r\n          </button>\r\n          <button\r\n            className={`tab-btn ${selectedTab === 1 && \"active-btn\"}`}\r\n            onClick={() => handleChange(1)}\r\n          >\r\n            Hourly\r\n          </button>\r\n        </div>\r\n        <div className=\"main-container\">\r\n          {selectedTab === 0 && (\r\n            <Daily\r\n              details={locationDetails}\r\n              location={location}\r\n              screenWidth={screenWidth}\r\n            />\r\n          )}\r\n          {selectedTab === 1 && (\r\n            <Hourly\r\n              details={locationDetails.hourly}\r\n              timezone_offset={locationDetails.timezone_offset}\r\n              screenWidth={screenWidth}\r\n            />\r\n          )}\r\n          <Map\r\n            latitude={currentDetails.coord.lat}\r\n            longitude={currentDetails.coord.lon}\r\n          />\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\nconst Map = ({ latitude, longitude }) => {\r\n  const position = [latitude, longitude];\r\n  return (\r\n    <MapContainer center={position} zoom={6}>\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      <TileLayer\r\n        url={`https://tile.openweathermap.org/map/clouds_new/{z}/{x}/{y}.png?appid=2c0a3c0e504032c9e73c695b431c4624`}\r\n      />\r\n      <TileLayer\r\n        url={`https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=2c0a3c0e504032c9e73c695b431c4624`}\r\n      />\r\n      <Marker position={position}>\r\n        <Popup>\r\n          A pretty CSS3 popup. <br /> Easily customizable.\r\n        </Popup>\r\n      </Marker>\r\n    </MapContainer>\r\n  );\r\n};\r\nexport default Location;\r\n","C:\\Users\\bh02\\Documents\\GitHub\\weather-report\\src\\useFetch.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":6,"column":3,"nodeType":"90","messageId":"91","endLine":6,"endColumn":8},{"ruleId":"88","severity":1,"message":"92","line":13,"column":9,"nodeType":"90","messageId":"91","endLine":13,"endColumn":16},{"ruleId":"84","replacedBy":"93"},{"ruleId":"86","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":56,"column":6,"nodeType":"97","endLine":56,"endColumn":8,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":57,"column":3,"nodeType":"90","endLine":57,"endColumn":12,"suggestions":"100"},{"ruleId":"88","severity":1,"message":"101","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":26},{"ruleId":"88","severity":1,"message":"102","line":1,"column":28,"nodeType":"90","messageId":"91","endLine":1,"endColumn":36},{"ruleId":"88","severity":1,"message":"102","line":1,"column":29,"nodeType":"90","messageId":"91","endLine":1,"endColumn":37},{"ruleId":"95","severity":1,"message":"103","line":59,"column":6,"nodeType":"97","endLine":59,"endColumn":16,"suggestions":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'YAxis' is defined but never used.","Identifier","unusedVar","'maxTemp' is assigned a value but never used.",["105"],["106"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'details' and 'timezone_offset'. Either include them or remove the dependency array. If 'setHours' needs the current value of 'details', you can also switch to useReducer instead of useState and read 'details' in the reducer.","ArrayExpression",["107"],"React Hook useEffect contains a call to 'setDisplayChart'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [screenWidth] as a second argument to the useEffect Hook.",["108"],"'Component' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'countryCode', 'latitude', and 'longitude'. Either include them or remove the dependency array.",["109"],"no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [details, timezone_offset]",{"range":"116","text":"117"},"Add dependencies array: [screenWidth]",{"range":"118","text":"119"},"Update the dependencies array to be: [countryCode, latitude, location, longitude]",{"range":"120","text":"121"},[1565,1567],"[details, timezone_offset]",[1668,1668],", [screenWidth]",[2149,2159],"[countryCode, latitude, location, longitude]"]